
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity evaluar is
    port (
        clk: in std_logic;
        reset: in std_logic;
        Tab1: in std_logic_vector (8 downto 0);
        Tab2: in std_logic_vector (8 downto 0);
        turn: in std_logic;
        B1: in std_logic;
        B1_prev: in std_logic;
        V1: out std_logic;      --victoria jugador 1
        V2: out std_logic;      --victoria jugador 2
        E: out std_logic
                --empate
    );
end evaluar;

architecture Behavioral of evaluar is
    signal S: std_logic_vector (8 downto 0);
    signal V: std_logic;    --victoria
    signal Tab: std_logic_vector (8 downto 0);
    signal B1_in: std_logic;
    signal B1_previo: std_logic;
begin

--MUX
with turn select
    S <= Tab1 when '0',
         Tab2 when '1',
         "---------" when others;
         
--empate
Tab <= Tab1 xor Tab2;
E <= '1' when (Tab = "111111111") and V/= '0' else '0';     --todo el tablero completo y nadie gana

--3 en raya
V <= '1' when (S(0)='1' and S(1)='1' and S(2)='1') or 
              (S(3)='1' and S(4)='1' and S(5)='1') or 
              (S(6)='1' and S(7)='1' and S(8)='1') or 
              (S(0)='1' and S(3)='1' and S(6)='1') or 
              (S(1)='1' and S(4)='1' and S(7)='1') or 
              (S(2)='1' and S(5)='1' and S(8)='1') or 
              (S(2)='1' and S(4)='1' and S(6)='1') or 
              (S(0)='1' and S(4)='1' and S(8)='1')
              else '0'; 

--S = "000000111" or   
--              S = "---111---" or
--              S = "111------" or
--              S = "--1--1--1" or
--              S = "-1--1--1-" or
--              S = "1--1--1--" or
--              S = "1---1---1" or
--              S = "--1-1-1--"
--              else '0';

--V1 y V2 tienen que ser un pulso de reloj
process (clk,reset)
begin
    if reset = '1' then
        B1_in <= '0';   
        B1_previo <= '0';    
    elsif clk'event and clk='1' then
        if B1_prev = '1' and B1_in = '0' then
            B1_previo <= '1';
        elsif B1_prev = '0' and B1_in = '1' then
            B1_previo <= '0';
        end if;
        B1_in <= B1_previo;
    end if;
end process;

V1 <= '1' when (V = '1' and turn = '0' and B1_in='0' and B1_prev ='1' ) else '0';
V2 <= '1' when (V = '1' and turn = '1' and B1_in='0' and B1_prev ='1') else '0';
  
end Behavioral;
